{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/currency.service.ts","webpack:///src/app/info/info.component.ts","webpack:///src/app/info/info.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","CurrencyService","dataSubject","arraySubject","currencyArray","resp","JSON","parse","stringify","manipulateData","next","currencyData","data","newQuotes","Object","entries","quotes","key","value","keyArray","split","itemArray","slice","concat","newKey","join","newItem","push","newSourceCurrency","sourceRatio","source","cloneCurrencies","CurrencyData","privacy","success","terms","timestamp","InfoComponent","currencyService","selectedSource","targetArray","sourceArray","dataSub","subscribe","arraySub","array","onUpdateData","fetchCurriencies","changeSource","event","newSource","target","newTarget","includes","splice","indexOf","sort","unsubscribe","onChangeSource","onToggleTarget","environment","production","access_key","bootstrapModule","err","console","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,Y,GALb;AAAA;;AAME,WAAAC,KAAA,GAAQ,cAAR;AACD,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACPzB;;;;;;;;;sEDOaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTE,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;AEPzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAkBaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,CAAC,iEAAD,C;AAAiB,gBAHnB,CACP,uEADO,CAGmB;;;;0HAGjBA,S,EAAS;AAAA,uBATlB,2DASkB,EARlB,kEAQkB;AARL,kBAGb,uEAHa;AAQK,O;AALL,K;;;;;sEAKJA,S,EAAS;cAXrB,sDAWqB;eAXZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,kEAFY,CADN;AAKRC,iBAAO,EAAE,CACP,uEADO,CALD;AAQRC,mBAAS,EAAE,CAAC,iEAAD,CARH;AASRC,mBAAS,EAAE,CAAC,2DAAD;AATH,S;AAWY,Q;;;;;;;;;;;;;;;;;;AClBtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,oC,CAEA;AAEA;;;QAIaC,e;AADb;AAAA;;AAGE,aAAAC,WAAA,GAAqC,IAAI,4CAAJ,EAArC;AACA,aAAAC,YAAA,GAAkC,IAAI,4CAAJ,EAAlC;AAEQ,aAAAC,aAAA,GAA0B,EAA1B;AAmFT,O,CAjFC;;;;;2CACmB;AACjB,cAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,iDAAf,CAAX,CAAb;AACA,eAAKC,cAAL,CAAoBJ,IAApB;AAEA,eAAKH,WAAL,CAAiBQ,IAAjB,CAAsB,KAAKC,YAA3B;AACA,eAAKR,YAAL,CAAkBO,IAAlB,CAAuB,KAAKN,aAA5B;AACD,S,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;uCAEeQ,I,EAAoB;AACjC;AACA;AACA,cAAMC,SAAS,GAAkBC,MAAM,EAAvC;;AAEA,6CAAyBA,MAAM,CAACC,OAAP,CAAeH,IAAI,CAACI,MAApB,CAAzB,qCAAsD;AAAA;AAAA,gBAA5CC,GAA4C;AAAA,gBAAvCC,KAAuC;;AACpD,gBAAIC,QAAQ,GAAaF,GAAG,CAACG,KAAJ,CAAU,EAAV,CAAzB,CADoD,CACZ;;AACxC,gBAAMC,SAAS,GAAaF,QAAQ,CAACG,KAAT,CAAe,CAAf,CAA5B,CAFoD,CAEL;;AAE/CH,oBAAQ,GAAGE,SAAS,CAACE,MAAV,CAAiBJ,QAAjB,CAAX,CAJoD,CAIb;;AAEvC,gBAAMK,MAAM,GAAWL,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAiB,CAAjB,EAAoBG,IAApB,CAAyB,EAAzB,CAAvB,CANoD,CAMC;;AACrD,gBAAMC,OAAO,GAAWL,SAAS,CAACI,IAAV,CAAe,EAAf,CAAxB,CAPoD,CAOP;;AAE7CZ,qBAAS,CAACW,MAAD,CAAT,GAAoBN,KAApB,CAToD,CASzB;;AAC3B,iBAAKd,aAAL,CAAmBuB,IAAnB,CAAwBD,OAAxB,EAVoD,CAUlB;AACnC;;AAEDd,cAAI,CAACI,MAAL,GAAcH,SAAd,CAlBiC,CAkBR;;AACzB,eAAKF,YAAL,GAAoBC,IAApB;AACD;;;qCAEYgB,iB,EAA2B;AACtC,cAAMC,WAAW,GAAW,KAAKlB,YAAL,CAAkBK,MAAlB,CAAyBY,iBAAiB,GAAG,KAAKjB,YAAL,CAAkBmB,MAA/D,CAA5B,CADsC,CAEtC;;AACA,cAAMjB,SAAS,GAAkBC,MAAM,EAAvC;AAEA,eAAKH,YAAL,CAAkBmB,MAAlB,GAA2BF,iBAA3B,CALsC,CAMtC;AAEA;;AACA,+CAAyBd,MAAM,CAACC,OAAP,CAAe,KAAKJ,YAAL,CAAkBK,MAAjC,CAAzB,wCAAmE;AAAA;AAAA,gBAAzDC,GAAyD;AAAA,gBAApDC,KAAoD;;AACjE,gBAAMC,QAAQ,GAAaF,GAAG,CAACG,KAAJ,CAAU,EAAV,CAA3B,CADiE,CACvB;;AAC1C,gBAAMI,MAAM,GAAWL,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBG,IAArB,CAA0B,EAA1B,IAAgCG,iBAAvD,CAFiE,CAGjE;;AAEAf,qBAAS,CAACW,MAAD,CAAT,GAAoBN,KAAK,IAAI,IAAIW,WAAR,CAAzB,CALiE,CAMjE;AACD;;AAED,eAAKlB,YAAL,CAAkBK,MAAlB,GAA2BH,SAA3B,CAlBsC,CAkBA;AACvC;;;0CAEc;AACb,cAAMkB,eAAe,GAAGzB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKG,YAApB,CAAX,CAAxB;AAEA,iBAAOoB,eAAP;AACD;;;2CAEe;AACd,iBAAO,KAAK3B,aAAL,CAAmBkB,KAAnB,EAAP;AACD;;;;;;;uBAtFUrB,e;AAAe,K;;;aAAfA,e;AAAe,eAAfA,eAAe;;;;;sEAAfA,e,EAAe;cAD3B;AAC2B,Q;;;QA0Ff+B,Y,GASX,wBAAc;AAAA;;AACZ,WAAKC,OAAL,GAAe,EAAf;AACA,WAAKjB,MAAL,GAAc;AAAEC,WAAG,EAAE;AAAP,OAAd;AACA,WAAKa,MAAL,GAAc,EAAd;AACA,WAAKI,OAAL,GAAe,KAAf;AACA,WAAKC,KAAL,GAAa,EAAb;AACA,WAAKC,SAAL,GAAiB,CAAjB;AACD,K;;;;;;;;;;;;;;;;;AClHH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACmCU;;AAIE;;AACF;;;;;;;;AAHQ;;AACA;;AACN;;AAAA;;;;;;;;;;;;AAYF;;AAIE;;AACF;;;;;;;;AAHQ;;AACA;;AACN;;AAAA;;;;;;;;AAUF;;AAEI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACF;;;;AAEF;;;;;;;;AAFE;;AAAA;;;;;;;;AAeJ;;AAEE;;AAIO;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAJP;;AAIyC;;AAC3C;;;;;;;;AAHS;;AAAA;;AACA;;AACkC;;AAAA;;;;QD/EtCC,a;AAUX,6BAAoBC,eAApB,EAAsD;AAAA;;AAAlC,aAAAA,eAAA,GAAAA,eAAA;AANpB,aAAA3B,YAAA,GAA6B,IAAI,8DAAJ,EAA7B;AAEA,aAAA4B,cAAA,GAAyB,KAAzB;AACA,aAAAC,WAAA,GAAwB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,CAAxB;AACA,aAAAC,WAAA,GAAwB,GAAGlB,MAAH,CAAU,KAAKiB,WAAf,CAAxB;AAEwD;;;;mCAE7C;AAAA;;AACT,eAAKE,OAAL,GAAe,KAAKJ,eAAL,CAAqBpC,WAArB,CAAiCyC,SAAjC,CAA2C,UAAA/B,IAAI,EAAI;AAChE,iBAAI,CAACD,YAAL,GAAoBC,IAApB;AACD,WAFc,CAAf;AAGA,eAAKgC,QAAL,GAAgB,KAAKN,eAAL,CAAqBnC,YAArB,CAAkCwC,SAAlC,CAA4C,UAAAE,KAAK,EAAI;AACnE,iBAAI,CAACzC,aAAL,GAAqByC,KAArB;AACD,WAFe,CAAhB;AAIA,eAAKC,YAAL;AACD;;;uCAEc;AACb,eAAKR,eAAL,CAAqBS,gBAArB,GADa,CAC4B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AACF,eAAKT,eAAL,CAAqBU,YAArB,CAAkC,KAAKT,cAAvC;AACD;;;uCAEcU,K,EAAmB;AAChC,cAAMC,SAAS,GAAYD,KAAK,CAACE,MAAN,CAAkCjC,KAA7D,CADgC,CAEhC;;AAEA,eAAKqB,cAAL,GAAsBW,SAAtB;AAEA,eAAKZ,eAAL,CAAqBU,YAArB,CAAkCE,SAAlC,EANgC,CAOhC;AACD;;;uCAEcA,S,EAAmB;AAChC,eAAKX,cAAL,GAAsBW,SAAtB;AAEA,eAAKZ,eAAL,CAAqBU,YAArB,CAAkCE,SAAlC;AACD;;;uCAEcD,K,EAAmB;AAChC,cAAMG,SAAS,GAAYH,KAAK,CAACE,MAAN,CAAkCjC,KAA7D,CADgC,CAEhC;;AAEA,cAAI,KAAKd,aAAL,CAAmBiD,QAAnB,CAA4BD,SAA5B,KAA0C;AAC1C,eAAKZ,WAAL,CAAiBa,QAAjB,CAA0BD,SAA1B,CADJ,EAC0C;AACtC;AAEF,iBAAKZ,WAAL,CAAiBc,MAAjB,CAAwB,KAAKd,WAAL,CAAiBe,OAAjB,CAAyBH,SAAzB,CAAxB,EAA6D,CAA7D,EAHwC,CAIxC;AAED,WAPD,MAOO,IAAI,KAAKhD,aAAL,CAAmBiD,QAAnB,CAA4BD,SAA5B,KAA0C;AAC1C,WAAC,KAAKZ,WAAL,CAAiBa,QAAjB,CAA0BD,SAA1B,CADL,EAC2C;AAC9C;AAEF,iBAAKZ,WAAL,CAAiBb,IAAjB,CAAsByB,SAAtB,EAHgD,CAGd;;AAClC,iBAAKZ,WAAL,CAAiBgB,IAAjB,GAJgD,CAIvB;AAC1B;AACF;;;uCAEcL,M,EAAgB;AAC7B,cAAI,KAAK/C,aAAL,CAAmBiD,QAAnB,CAA4BF,MAA5B,KACA,KAAKX,WAAL,CAAiBa,QAAjB,CAA0BF,MAA1B,CADJ,EACuC;AAErC,iBAAKX,WAAL,CAAiBc,MAAjB,CAAwB,KAAKd,WAAL,CAAiBe,OAAjB,CAAyBJ,MAAzB,CAAxB,EAA0D,CAA1D;AAED;AACF;;;sCAEa;AACZ,eAAKT,OAAL,CAAae,WAAb;AACA,eAAKb,QAAL,CAAca,WAAd;AACD;;;;;;;uBAnFUpB,a,EAAa,kI;AAAA,K;;;YAAbA,a;AAAa,+B;AAAA,e;AAAA,c;AAAA,47B;AAAA;AAAA;ACV1B;;AACE;;AACE;;AACE;;AACE;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;;;AACF;;AACF;;AACA;;AACE;;AAEQ;AAAA,mBAAS,IAAAS,YAAA,EAAT;AAAuB,WAAvB;;AACN;;AACF;;AACF;;AACF;;AACF;;AACF;;AAEA;;AACE;;AACE;;AAEE;;AACE;;AACE;;AACF;;AACA;;AAEQ;AAAA,mBAAU,IAAAY,cAAA,QAAV;AAAgC,WAAhC;;AACN;;AAMF;;AACF;;AAEA;;AACE;;AACE;;AACF;;AACA;;AAEQ;AAAA,mBAAU,IAAAC,cAAA,QAAV;AAAgC,WAAhC;;AACN;;AAMF;;AACF;;AAEA;;AACE;;AACE;;AACF;;AACA;;AACE;;AAMF;;AACF;;AAEF;;AACF;;AACF;;AAEA;;AACE;;AACE;;AACE;;AAAI;;AAA8B;;AAClC;;AACE;;AAQF;;AACF;;AACF;;AACF;;;;AApFU;;AAAA;;AA0BQ;;AAAA;;AAgBA;;AAAA;;AAUR;;AAAA;;AAGI;;AAAA;;AAmBA;;AAAA;;;;;;;;;;sED1EDtB,a,EAAa;cALzB,uDAKyB;eALf;AACT5C,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEV1B;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMiE,WAAW,GAAG;AACzBC,gBAAU,EAAE,KADa;AAEzBC,gBAAU,EAAE;AAFa,KAApB;AAKP;;;;;;;AAOA;;;;;;;;;;;;;;;;;AChBA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYD,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBE,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'currency-api';\n}\n","<app-info></app-info>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { InfoComponent } from './info/info.component';\nimport { CurrencyService } from './currency.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InfoComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [CurrencyService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n// import { environment } from '../environments/environment';\n\n// Dummy JSON file\nimport apiData from '../assets/apiData.json';\n\n@Injectable()\nexport class CurrencyService {\n\n  dataSubject: Subject<CurrencyData> = new Subject<CurrencyData>();\n  arraySubject: Subject<string[]> = new Subject<string[]>();\n  private currencyData: CurrencyData;\n  private currencyArray: string[] = [];\n\n  // Dummy API Request\n  fetchCurriencies() {\n    const resp = JSON.parse(JSON.stringify(apiData));\n    this.manipulateData(resp);\n\n    this.dataSubject.next(this.currencyData);\n    this.arraySubject.next(this.currencyArray);\n  }\n\n  // fetchCurriencies(): Promise<void> {\n  //   return fetch(\n  //     // fetching data from api\n  //     'http://api.currencylayer.com/live' +\n  //     '?access_key=' + environment.access_key +\n  //     '&format=1'\n  //   )\n  //   .then(resp => resp.json())\n  //   .then(resp => {\n  //     this.manipulateData(resp);\n\n  //     this.dataSubject.next(this.currencyData);\n  //     this.arraySubject.next(this.currencyArray);\n  //   })\n  //   .catch(err => {\n  //     console.log(err);\n  //   });\n  // }\n\n  manipulateData(data: CurrencyData) {\n    // manipulation of currencyData.quotes\n    // and creating currencyArray\n    const newQuotes: {key: number} = Object();\n\n    for (let [key, value] of Object.entries(data.quotes)) {\n      let keyArray: string[] = key.split(''); // getting an array of key for string manipulation for qoutes\n      const itemArray: string[] = keyArray.slice(3); // getting the last 3 items from that array for currencyArray\n\n      keyArray = itemArray.concat(keyArray); // A,E,D + U,S,D,A,E,D=A,E,D,U,S,D,A,E,D\n\n      const newKey: string = keyArray.slice(0,6).join(''); // getting the first 6 items=AEDUSA for qoutes\n      const newItem: string = itemArray.join('');  // AED for currencyArray\n\n      newQuotes[newKey] = value; // creating a new qoutes to finish the manipulation\n      this.currencyArray.push(newItem); // finishing the currency Array\n    }\n\n    data.quotes = newQuotes; // finishing the manipulation\n    this.currencyData = data;\n  }\n\n  changeSource(newSourceCurrency: string) {\n    const sourceRatio: number = this.currencyData.quotes[newSourceCurrency + this.currencyData.source];\n    // getting ratio of the selected currency from currencyData.qoutes\n    const newQuotes: {key: number} = Object();\n\n    this.currencyData.source = newSourceCurrency;\n    // Updating the source in currencyData.source\n\n    // Manipulation currencyData.quotes\n    for (let [key, value] of Object.entries(this.currencyData.quotes)) {\n      const keyArray: string[] = key.split(''); // getting array from keys name\n      const newKey: string = keyArray.slice(0, 3).join('') + newSourceCurrency;\n      // changing the key name\n\n      newQuotes[newKey] = value * (1 / sourceRatio);\n      // creating a new quotes object with new key name and converted value\n    }\n\n    this.currencyData.quotes = newQuotes; // finishing the manipulation\n  }\n\n  getCurrencyData(): CurrencyData {\n    const cloneCurrencies = JSON.parse(JSON.stringify(this.currencyData));\n\n    return cloneCurrencies;\n  }\n\n  getCurrencyArray(): string[] {\n    return this.currencyArray.slice();\n  }\n\n}\n\nexport class CurrencyData {\n  // Model of the fetch object from api\n  privacy: string;\n  quotes: {key: number};\n  source: string;\n  success: boolean;\n  terms: string;\n  timestamp: number;\n\n  constructor() {\n    this.privacy = '';\n    this.quotes = { key: 0 };\n    this.source = '';\n    this.success = false;\n    this.terms = '';\n    this.timestamp = 0;\n  }\n}\n\n\n\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { CurrencyService, CurrencyData } from '../currency.service';\n\n@Component({\n  selector: 'app-info',\n  templateUrl: './info.component.html',\n  styleUrls: ['./info.component.css']\n})\nexport class InfoComponent implements OnInit, OnDestroy {\n\n  dataSub: Subscription;\n  arraySub: Subscription;\n  currencyData: CurrencyData = new CurrencyData();\n  currencyArray: string[];\n  selectedSource: string = 'TRY';\n  targetArray: string[] = ['CNY', 'EUR', 'GBP', 'INR', 'JPY', 'KRW', 'RUB', 'TRY', 'USD'];\n  sourceArray: string[] = [].concat(this.targetArray);\n\n  constructor(private currencyService: CurrencyService) {}\n\n  ngOnInit() {\n    this.dataSub = this.currencyService.dataSubject.subscribe(data => {\n      this.currencyData = data;\n    });\n    this.arraySub = this.currencyService.arraySubject.subscribe(array => {\n      this.currencyArray = array;\n    })\n\n    this.onUpdateData();\n  }\n\n  onUpdateData() {\n    this.currencyService.fetchCurriencies(); // dummy fetching\n      // .then(() => {\n      //   // Changing source currency\n      //   this.currencyService.changeSource(this.selectedSource);\n      // })\n      // .catch(err => {\n      //   console.log(err);\n      // });\n    this.currencyService.changeSource(this.selectedSource);\n  }\n\n  onChangeSource(event: InputEvent) {\n    const newSource: string = (event.target as HTMLInputElement).value;\n    // getting the name of selected currency\n\n    this.selectedSource = newSource;\n\n    this.currencyService.changeSource(newSource);\n    // sending the name to service\n  }\n\n  onSwitchSource(newSource: string) {\n    this.selectedSource = newSource;\n\n    this.currencyService.changeSource(newSource);\n  }\n\n  onToggleTarget(event: InputEvent) {\n    const newTarget: string = (event.target as HTMLInputElement).value;\n    // getting the value from the html input\n\n    if (this.currencyArray.includes(newTarget) && // validation\n        this.targetArray.includes(newTarget)) {\n        // target is already in the array\n\n      this.targetArray.splice(this.targetArray.indexOf(newTarget), 1);\n      // removing the selected target from the array\n\n    } else if (this.currencyArray.includes(newTarget) && // validation\n               !this.targetArray.includes(newTarget)) {\n        // target is not in the array\n\n      this.targetArray.push(newTarget); // pushing new target into array\n      this.targetArray.sort(); // sorting the array\n    }\n  }\n\n  onRemoveTarget(target: string) {\n    if (this.currencyArray.includes(target) &&\n        this.targetArray.includes(target)) {\n\n      this.targetArray.splice(this.targetArray.indexOf(target), 1);\n\n    }\n  }\n\n  ngOnDestroy() {\n    this.dataSub.unsubscribe();\n    this.arraySub.unsubscribe();\n  }\n}\n","<div class=\"header\">\n  <div class=\"container\">\n    <div class=\"row text-center\">\n      <div class=\"col-xs-4\">\n        <h3>\n          Currency API\n        </h3>\n      </div>\n      <div class=\"col-xs-4\">\n        <p class=\"lead\">\n          {{currencyData.timestamp * 1000 | date: 'd/M/yy, h:mm a': '+2330'}}\n        </p>\n      </div>\n      <div class=\"col-xs-4\">\n        <button type=\"button\"\n                class=\"btn btn-warning\"\n                (click)=\"onUpdateData()\">\n          Update!\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"content\">\n  <div class=\"container\">\n    <div class=\"row text-center\">\n\n      <div class=\"col-xs-3\">\n        <label for=\"sourceArray\">\n          Source currency:\n        </label>\n        <select multiple name=\"sourceArray\"\n                class=\"form-control source\"\n                (change)=\"onChangeSource($event)\">\n          <option class=\"text-center\"\n                  *ngFor=\"let currency of currencyArray\"\n                  value=\"{{currency}}\"\n                  [selected]=\"currency === selectedSource\">\n            {{currency}}\n          </option>\n        </select>\n      </div>\n\n      <div class=\"col-xs-3\">\n        <label for=\"targetArray\">\n          Target currency:\n        </label>\n        <select multiple name=\"targetArray\"\n                class=\"form-control target\"\n                (change)=\"onToggleTarget($event)\">\n          <option class=\"text-center\"\n                  *ngFor=\"let currency of currencyArray\"\n                  value=\"{{currency}}\"\n                  [ngClass]=\"{'checked': targetArray.includes(currency)}\">\n            {{currency}}\n          </option>\n        </select>\n      </div>\n\n      <div class=\"col-xs-6\">\n        <label>\n          {{\"1 \" + selectedSource + \" equals:\"}}\n        </label>\n        <ul class=\"list-group\">\n          <li *ngFor=\"let target of targetArray\"\n              class=\"list-group-item\"\n              (click)=\"onRemoveTarget(target)\">\n            {{target + ' / ' + selectedSource + ' = '}}\n            {{currencyData.quotes[target + selectedSource] | number:'1.0-3'}}\n          </li>\n        </ul>\n      </div>\n\n    </div>\n  </div>\n</div>\n\n<div class=\"low-cont\">\n  <div class=\"container\">\n    <div class=\"row text-center\">\n      <h4>Change simply source currency:</h4>\n      <div class=\"form-group\">\n        <label class=\"radio-inline\"\n              *ngFor=\"let source of sourceArray\">\n          <input type=\"radio\"\n                 name=\"optradio\"\n                 value={{source}}\n                 [checked]=\"source === selectedSource\"\n                 (change)=\"onSwitchSource(source)\">{{source}}\n        </label>\n      </div>\n    </div>\n  </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  access_key: '489ca62b04d3a324f9d97a415ec0e032'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}